import{_ as p,r as o,o as r,c as i,a as n,b as s,d as e,f as l,e as t}from"./app.75e82d55.js";const c={},d=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>不以规矩，不能成方圆。</p></blockquote><h2 id="为什么需要规范" tabindex="-1"><a class="header-anchor" href="#为什么需要规范" aria-hidden="true">#</a> 为什么需要规范</h2><ul><li>提高代码整体的可读性、可维护性、可复用性、可移植性和可靠性，这会从根本上降低开发成本，也是最重要的一点。</li><li>保证代码的一致性：软件系统中最重要的因素之一就是编码的一致性。如果编码风格一致，也更加易于维护，因为团队内任何人都可以快速理解并修改。</li><li>提升团队整体效率：开发人员通常需要花费大量的时间来解决代码质量问题，如果都按照规范编写，也有助于团队尽早发现问题，甚至完全预防问题，这将提高整个交付过程的效率。</li><li>减少 code review 期间一系列的争议，因为缺乏标准，在争议过程中双方很难妥协（没少因为这事争论过 😕）。</li></ul><h2 id="前端工作流常用工具-🔧" tabindex="-1"><a class="header-anchor" href="#前端工作流常用工具-🔧" aria-hidden="true">#</a> 前端工作流常用工具 🔧</h2>',5),u={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/typicode/husky/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"代码规范",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码规范","aria-hidden":"true"},"#"),s(" 代码规范")],-1),y=n("h3",{id:"代码检查工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码检查工具","aria-hidden":"true"},"#"),s(" 代码检查工具")],-1),f=n("p",null,"JS/TS 主流的大致有这几种：",-1),q={href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"},_={href:"https://google.github.io/styleguide/jsguide.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/rwaldron/idiomatic.js",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/standard/standard",target:"_blank",rel:"noopener noreferrer"},S={href:"https://contribute.jquery.org/style-guide/js/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>比较推荐使用 Airbnb JavaScript Style Guide，它在 Github 上足有 12 万 star，几乎覆盖了 <code>JavaScript</code> 的每一项特性。</p><p>具体配置：</p><p>1). 安装依赖</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install eslint <span class="token operator">--</span>save<span class="token operator">-</span>dev
<span class="token comment">// or</span>
yarn add eslint <span class="token operator">--</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2). 生成配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init @eslint/config
// or
<span class="token function">yarn</span> create @eslint/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟着终端中的提示，按照自身需求一步步选择即可。</p><p>有了具体的规范后，我们同样需要使用工具去约束：还是通过在<code>git commit</code>阶段校验，若不通过则取消提交。</p><p>配置（还是在 <code>package.json</code> 中的 <code>lint-staged</code> ）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;**/*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write --ignore-unknown&quot;</span><span class="token punctuation">,</span> <span class="token comment">//格式化</span>
    <span class="token string-property property">&quot;src/*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --ext .js,.ts,.tsx&quot;</span>  <span class="token comment">//进行eslint校验</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意： 这里如果选用的 Typescript，则会默认使用<code>@typescript-eslint/parser</code>解析器，官方为了追求更快的解析速度，并不会对.ts 文件中的类型进行检查，只会做语法检测。 如果需要对类型也进行检测，需要在 extends 中加上<code>plugin:@typescript-eslint/recommended-requiring-type-checking</code>。 但是在笔者的使用中发现效果并不好，一些基本的类型依然检测不出来，索性这里换了另一种方式：在 pre commit 中执行<code>yarn run tsc</code>，这里的意思是对项目中 ts 文件进行类型检测，默认会读取根目录中的<code>tsconfig.json</code>配置。 这种方式并不完美，它的弊端就在于<code>全量检测</code>，如果项目不大还好，若是项目代码量够多，检测 10-20s 也是常有的事。</p></blockquote>`,11),w={href:"https://eslint.org/docs/latest/user-guide/getting-started",target:"_blank",rel:"noopener noreferrer"},C=n("h3",{id:"代码风格工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码风格工具","aria-hidden":"true"},"#"),s(" 代码风格工具")],-1),D=n("p",null,"由于每个开发者的 IDE 不同，即使 IDE 相同也会因为每个人的配置不一样导致格式化的结果不一样。如何确保团队内开发人员采用统一的格式化配置呢？",-1),E={href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>1). 安装依赖：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev <span class="token operator">--</span>save<span class="token operator">-</span>exact prettier
<span class="token comment">// or</span>
yarn add prettier <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2). 创建一个空配置文件，让编辑器和其他工具知道你正在使用 <code>Prettier</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>echo <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">.</span>prettierrc<span class="token punctuation">.</span>json

<span class="token comment">// 自己配置</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;arrowParens&quot;</span><span class="token operator">:</span> <span class="token string">&quot;avoid&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3). 创建一个<code>.prettierignore</code>文件，让 Prettier CLI 和编辑器知道哪些文件不能格式化，example：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code># Ignore artifacts<span class="token operator">:</span>
dist
build
coverage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4). 解决冲突</p><p>其他：若使用的是脚手架工具搭建的项目，会自带 <code>eslint</code> 配置（<code>eslintConfig</code>）。</p><p><code>prettier</code> 和 <code>eslint</code> 会有一些配置上的冲突，这个时候需要安装 <code>eslint-config-prettier</code> 以使 <code>ESLint</code> 和 <code>Prettier</code> 相互配合，安装完后在<code>.eslintrc</code> 中配置（以 <code>Create-React-App</code> 为例）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> eslint-config-prettier eslint-plugin-prettier <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token string-property property">&quot;eslintConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;react-app&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;react-app/jest&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;prettier&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以用&quot;<code>prettier</code>&quot;的部分规则覆盖前面的规则，让它们都能正常工作。</p><p>5). 配置编辑器（VScode 为例）</p>`,13),J={href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,[n("img",{src:"http://salted-fish-bucket.oss-cn-guangzhou.aliyuncs.com/1.webp",alt:"1.webp"})],-1),P=n("p",null,"找到 IDE 中设置模块，搜索 format On Save，勾上这个就可以了。",-1),V=n("p",null,[n("img",{src:"http://salted-fish-bucket.oss-cn-guangzhou.aliyuncs.com/2.webp",alt:"2.webp"})],-1),L=n("p",null,"现在当我们 Ctrl + S 保存代码时，插件就会帮助我们自动格式化了。",-1),N=n("p",null,[s("这里有小伙伴要问了，要是有人将没有格式化的代码提交上去怎么办？ 这时候就需要在 "),n("code",null,"git commit"),s(" 的阶段自动将提交的代码进行格式化，这里我们借助工具 "),n("code",null,"husky"),s("，它主要可以帮助我们在 "),n("code",null,"git"),s(" 阶段检查提交消息、运行测试、检查代码等。")],-1),A=t(`<h2 id="git-规范" tabindex="-1"><a class="header-anchor" href="#git-规范" aria-hidden="true">#</a> git 规范</h2><blockquote><p>Git 有很多的 hooks, 让我们在不同的阶段,对代码进行不同的操作,控制提交到仓库的代码的规范性,和准确性, 以下只是几个常用的钩子</p></blockquote><h3 id="常用钩子" tabindex="-1"><a class="header-anchor" href="#常用钩子" aria-hidden="true">#</a> 常用钩子</h3><ul><li><strong><code>pre-commit</code></strong> 判断提交的代码是否符合规范</li><li><strong><code>commit-msg</code></strong> 判断 commit 信息是否符合规范</li><li><strong><code>pre-commit</code></strong> 执行测试，避免对以前的内容造成影响</li></ul><h3 id="安装代码校验依赖" tabindex="-1"><a class="header-anchor" href="#安装代码校验依赖" aria-hidden="true">#</a> 安装代码校验依赖</h3><ul><li>安装 <code>husky</code> 和 ​​<code>lint-staged</code>：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev husky lint<span class="token operator">-</span>staged
npx husky install
npm set<span class="token operator">-</span>script prepare <span class="token string">&quot;husky install&quot;</span>
npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>pre<span class="token operator">-</span>commit <span class="token string">&quot;npx lint-staged&quot;</span>
<span class="token comment">// or</span>
yarn add  husky lint<span class="token operator">-</span>staged <span class="token operator">-</span><span class="token constant">D</span>
npx husky install
npm set<span class="token operator">-</span>script prepare <span class="token string">&quot;husky install&quot;</span>
npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>pre<span class="token operator">-</span>commit <span class="token string">&quot;npx lint-staged&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后将<code>lint-staged</code>配置添加到 package.json 中:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 自己搭配，仅做参考</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;**/*&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write --ignore-unknown&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write .&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint  --fix&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;*.md&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier --write&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段配置的意思是：当执行 <code>git commit</code> 阶段前，先执行 <code>lint-staged</code>，<code>lint-staged</code> 中的内容就是对暂存区的文件执行格式化的命令。</p><h3 id="安装提交信息依赖" tabindex="-1"><a class="header-anchor" href="#安装提交信息依赖" aria-hidden="true">#</a> 安装提交信息依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @commitlint/cli @commitlint/config-conventional <span class="token parameter variable">-D</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建<code>commitlint.config.js</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>@commitlint/config-conventional</code> 这是一个<strong>规范配置</strong>,标识采用什么规范来执行消息校验, 这个默认是 <code>Angular</code> 的提交规范</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>build</td><td>编译相关的修改，例如发布版本、对项目构建或者依赖的改动</td></tr><tr><td>chore</td><td>其他修改, 比如改变构建流程、或者增加依赖库、工具等</td></tr><tr><td>ci</td><td>持续集成修改</td></tr><tr><td>docs</td><td>文档修改</td></tr><tr><td>feat</td><td>新特性、新功能</td></tr><tr><td>fix</td><td>修改 bug</td></tr><tr><td>perf</td><td>优化相关，比如提升性能、体验</td></tr><tr><td>refactor</td><td>代码重构</td></tr><tr><td>revert</td><td>回滚到上一个版本</td></tr><tr><td>style</td><td>代码格式修改, 注意不是 css 修改</td></tr><tr><td>test</td><td>测试用例修改</td></tr></tbody></table><p><code>commit-msg</code> 钩子执行 消息校验</p><p>这里也可以采用自己写的方法,来校验内容, 看下<code>vue@next</code> 的消息提交</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;gitHooks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;pre-commit&quot;</span><span class="token operator">:</span><span class="token string">&quot;lint-staged&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;commit-msg&quot;</span><span class="token operator">:</span><span class="token string">&quot;node scripts/verifyCommit. js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用自己写的方法,设置的话使用一下指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;node [dir]/filename.js&#39;</span>\` <span class="token comment"># 指定目录文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装辅助提交依赖" tabindex="-1"><a class="header-anchor" href="#安装辅助提交依赖" aria-hidden="true">#</a> 安装辅助提交依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">npm</span> i commitizen cz-conventional-changelog <span class="token parameter variable">-D</span>
  or
  <span class="token function">yarn</span> <span class="token function">add</span> commitizen cz-conventional-changelog <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装指令和命令行的展示信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">npm</span> set-script commit <span class="token string">&quot;git-cz&quot;</span> <span class="token comment"># package.json 中添加 commit 指令, 执行 \`git-cz\` 指令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写 commit 指令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx commitizen init cz-conventional-changelog --save-dev --save-exact
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义提交规范" tabindex="-1"><a class="header-anchor" href="#自定义提交规范" aria-hidden="true">#</a> 自定义提交规范</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token function">npm</span> i <span class="token parameter variable">-D</span> commitlint-config-cz  cz-customizable
  or
  <span class="token function">yarn</span> <span class="token function">add</span> commitlint-config-cz  cz-customizable <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变更 <code>commitlint.config.js</code> 这里采用自己定义的规范,将会覆盖上面那个,所以上面那个可以不用安装</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;cz&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>增加 <code>.cz-config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;✨ 新增&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;新增: 新的内容&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;🐛 修复&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;修复: 修复一个 Bug&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;📝 文档&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;文档: 变更的只有文档&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;💄 格式&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;格式: 空格, 分号等格式修复&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;♻️ 重构&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;重构: 代码重构，注意和特性、修复区分开&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;⚡️ 性能&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;性能: 提升性能&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;✅ 测试&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;测试: 添加一个测试&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;🔧 工具&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;工具: 开发工具变动(构建、脚手架工具等)&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;⏪ 回滚&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;回滚: 代码回退&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;leetcode&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;javascript&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;typescript&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;node&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// it needs to match the value for field type. Eg.: &#39;fix&#39;</span>
  <span class="token operator">/</span>_ scopeOverrides<span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fix</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;merge&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;e2eTest&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;unitTest&#39;</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> _<span class="token operator">/</span>
  <span class="token comment">// override the messages, defaults are as follows</span>
  <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;选择一种你的提交类型:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&#39;选择一个 scope (可选):&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// used if allowCustomScopes is true</span>
  <span class="token literal-property property">customScope</span><span class="token operator">:</span> <span class="token string">&#39;Denote the SCOPE of this change:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;短说明:\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;长说明，使用&quot;|&quot;换行(可选)：\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">breaking</span><span class="token operator">:</span> <span class="token string">&#39;非兼容性说明 (可选):\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">&#39;关联关闭的 issue，例如：#31, #34(可选):\\n&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">confirmCommit</span><span class="token operator">:</span> <span class="token string">&#39;确定提交说明?(yes/no)&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">allowCustomScopes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">allowBreakingChanges</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;特性&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;修复&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// limit subject length</span>
  <span class="token literal-property property">subjectLimit</span><span class="token operator">:</span> <span class="token number">100</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>package.json</code> 中,将原来 commit 配置,变更为自定义配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-customizable&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后提交就会显示对应你自己的配置文件内容，到此你就完成了自己的一个工作流的搭建了。</p><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2><p>统一规范的最根本目的是为了保证团队成员的一致性，从而减少沟通成本，提高开发效率。 学会热爱标准，但要确保它们不是一成不变的。如果制定的规范不适合您的团队，请确保可以适应和重写所需要的任何规则。它并不是要强制执行一种工作方式，而是为了帮助促进团队之间的互动 👏👏👏。</p>`,38);function B(T,O){const a=o("ExternalLinkIcon");return r(),i("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[s("Prettier"),e(a)]),s(" 代码风格工具")]),n("li",null,[n("a",k,[s("ESLint"),e(a)]),s(" 是一个根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具，其目的是使代码风格更加一致并避免错误。")]),n("li",null,[n("a",v,[s("husky"),e(a)]),s(" 当您提交或推送时，您可以使用它来整理您的提交消息、运行测试、lint 代码等。")]),n("li",null,[n("a",m,[s("lint-staged"),e(a)]),s(" lint-staged 是一个在 git 暂存区上运行 linters 的工具，它将根据 package.json 依赖项中的代码质量工具来安装和配置 husky 和 lint-staged ，因此请确保在此之前安装（npm install --save-dev）并配置所有代码质量工具，比如 Prettier 和 ESlint。")]),n("li",null,[n("a",g,[s("commitlint"),e(a)]),s(" 用来规范提交信息的")]),n("li",null,[n("a",b,[s("commitizen"),e(a)])])]),h,y,f,n("ul",null,[n("li",null,[n("a",q,[s("Airbnb JavaScript Style Guide"),e(a)])]),n("li",null,[n("a",_,[s("Google JavaScript Style Guide"),e(a)])]),n("li",null,[n("a",x,[s("Idiomatic JavaScript Style Guide"),e(a)])]),n("li",null,[n("a",j,[s("JavaScript Standard Style Guide"),e(a)])]),n("li",null,[n("a",S,[s("jQuery JavaScript Style Guide"),e(a)])])]),z,n("p",null,[s("更多详情查看 "),n("a",w,[s("eslint 官网"),e(a)])]),C,D,n("p",null,[s("这里给推荐大家使用 "),n("a",E,[s("prettier"),e(a)]),s("，它内置了一套格式化的规则，具体配置：")]),G,n("p",null,[s("DE 中安装 "),n("a",J,[s("Prettier-Code Formater"),e(a)]),s(" 插件：")]),I,P,V,L,N,l(` ## 代码规范之 CSS 规范

CSS 检查代码规范使用 stylelint 插件，规范则推荐使用 [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard)

1). 安装

\`\`\`js
npm install --save-dev stylelint stylelint-config-standard
\`\`\`

2). 在项目的根目录中创建一个配置文件\`.stylelintrc.json\`，内容如下：

\`\`\`js
{
  "extends": "stylelint-config-standard"
}
\`\`\`

3). 解决与 prettier 配置的冲突：

\`\`\`js
npm install --save-dev stylelint-config-prettier
\`\`\`

4). 将下面配置复制到.stylelintrc.json 中：

\`\`\`js
{
  "extends": ["stylelint-config-standard", "stylelint-config-prettier"]
}
\`\`\`

5). 在 git commitv 阶段进行检测：

\`\`\`js
 "lint-staged": {
    "**/*": "prettier --write --ignore-unknown", //格式化
    "src/**.{js,jsx,ts,tsx}": "eslint --ext .js,.jsx,.ts,.tsx", //对js文件检测
    "**/*.{less,css}": "stylelint --fix" //对css文件进行检测
  },
\`\`\` `),A])}const F=p(c,[["render",B],["__file","index.html.vue"]]);export{F as default};
