import{_ as t,r as o,o as l,c as p,a as n,b as s,d as e,e as c}from"./app.75e82d55.js";const d={},i={href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"},r={href:"https://git-scm.com/docs/githooks",target:"_blank",rel:"noopener noreferrer"},u=c(`<h2 id="特征" tabindex="-1"><a class="header-anchor" href="#特征" aria-hidden="true">#</a> 特征</h2><ul><li>零依赖和轻量级 ( 6 kB)</li><li>由现代新 Git 功能提供支持 ( core.hooksPath)</li><li>遵循有关自动安装的 npm 和 Yarn 最佳实践</li><li>用户友好的消息</li><li>可选安装</li><li>喜欢哈士奇 4，支持 <ul><li>macOS、Linux 和 Windows</li><li>Git 图形用户界面</li><li>自定义目录</li><li>单体仓库</li></ul></li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p><code>husky-init</code>是用 <code>husky</code> 快速初始化项目的一次性命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span>       <span class="token comment"># npm</span>
npx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span>              <span class="token comment"># Yarn 1</span>
<span class="token function">yarn</span> dlx husky-init <span class="token parameter variable">--yarn2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> <span class="token comment"># Yarn 2+</span>
<span class="token function">pnpm</span> dlx husky-init <span class="token operator">&amp;&amp;</span> <span class="token function">pnpm</span> <span class="token function">install</span> <span class="token comment"># pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它将设置 <code>husky</code>，修改<code>package.json</code>并创建一个<code>pre-commit</code>您可以编辑的示例挂钩。<code>npm test</code>默认情况下，它会在您提交时运行。</p><p>要添加另一个挂钩，请使用<code>husky add.</code></p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>对于 <code>Windows</code> 用户，如果您在运行时看到帮助消息<code>npx husky add</code> ...，请尝试<code>node node_modules/husky/lib/bin add ...</code>改用。这不是哈士奇代码的问题。</em></p><h2 id="lint-staged" tabindex="-1"><a class="header-anchor" href="#lint-staged" aria-hidden="true">#</a> lint-staged</h2><p><strong><code>lint-staged</code> 是一个在 git 暂存区上运行 linters 的工具。</strong></p><p>它将根据<code>package.json</code>依赖项中的代码质量工具来安装和配置 <code>husky</code> 和 <code>lint-staged</code> ，因此请确保在此之前安装（<code>npm install --save-dev</code>）并配置所有代码质量工具，比如<code>Prettier</code>和<code>ESlint</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>执行 npx lint<span class="token operator">-</span>staged <span class="token operator">--</span>help 命令可以看到相关的所有参数如下：
<span class="token literal-property property">用法</span><span class="token operator">:</span> lint<span class="token operator">-</span>staged <span class="token punctuation">[</span>options<span class="token punctuation">]</span>

<span class="token literal-property property">Options</span><span class="token operator">:</span>
  <span class="token operator">-</span><span class="token constant">V</span><span class="token punctuation">,</span> <span class="token operator">--</span>version                      输出版本号
  <span class="token operator">--</span>allow<span class="token operator">-</span>empty                      当任务撤消所有分阶段的更改时允许空提交（默认值：<span class="token boolean">false</span>）
  <span class="token operator">-</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>config <span class="token punctuation">[</span>path<span class="token punctuation">]</span>                配置文件的路径
  <span class="token operator">-</span>d<span class="token punctuation">,</span> <span class="token operator">--</span>debug                        打印其他调试信息（默认值：<span class="token boolean">false</span>）
  <span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token operator">--</span>concurrent <span class="token operator">&lt;</span>parallel tasks<span class="token operator">&gt;</span>  要同时运行的任务数，或者为<span class="token boolean">false</span>则要连续运行任务（默认值：<span class="token boolean">true</span>）
  <span class="token operator">-</span>q<span class="token punctuation">,</span> <span class="token operator">--</span>quiet                        自己的控制台输出（默认值：<span class="token boolean">false</span>）
  <span class="token operator">-</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>relative                     将相对文件路径传递给任务（默认值：<span class="token boolean">false</span>）
  <span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token operator">--</span>shell                        跳过任务解析以更好地支持shell（默认值：<span class="token boolean">false</span>）
  <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help                         输出用法信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git-commit-提交规范" tabindex="-1"><a class="header-anchor" href="#git-commit-提交规范" aria-hidden="true">#</a> git commit 提交规范</h2><p>通常使用 Google AnguarJS 规范的要求。 格式要求：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
&lt;BLANK LINE&gt;
&lt;body&gt;
&lt;BLANK LINE&gt;
&lt;footer&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;type&gt;</code>代表某次提交的类型，比如是修复一个 <code>bug</code> 或是增加一个 <code>feature</code>，具体类型如下： <table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增 feature</td></tr><tr><td>fix</td><td>修复 bug</td></tr><tr><td>docs</td><td>仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE 等等</td></tr><tr><td>style</td><td>仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑</td></tr><tr><td>refactor</td><td>代码重构，没有加新功能或者修复 bug</td></tr><tr><td>perf</td><td>优化相关，比如提升性能、体验</td></tr><tr><td>test</td><td>测试用例，包括单元测试、集成测试等</td></tr><tr><td>chore</td><td>改变构建流程、或者增加依赖库、工具等</td></tr><tr><td>revert</td><td>回滚到上一个版本</td></tr></tbody></table></li><li><code>scope</code> 说明 <code>commit</code> 影响的范围。<code>scope</code> 依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。</li><li><code>subject</code> 是 <code>commit</code> 的简短描述；</li><li><code>body</code> 提交代码的详细描述；</li><li><code>footer</code> 如果代码的提交是不兼容变更或关闭缺陷，则 <code>footer</code> 必需，否则可以省略。</li></ul>`,18);function k(m,h){const a=o("ExternalLinkIcon");return l(),p("div",null,[n("p",null,[n("a",i,[s("husky 官方文档"),e(a)])]),n("p",null,[s("当您提交或推送时，您可以使用它来整理您的提交消息、运行测试、lint 代码等。Husky 支持"),n("a",r,[s("所有 Git 钩子"),e(a)]),s("。")]),u])}const b=t(d,[["render",k],["__file","index.html.vue"]]);export{b as default};
