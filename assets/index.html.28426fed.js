import{_ as e,o as n,c as a,e as o}from"./app.75e82d55.js";const s={},c=o(`<h2 id="npx-npm-区别" tabindex="-1"><a class="header-anchor" href="#npx-npm-区别" aria-hidden="true">#</a> npx npm 区别</h2><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h3><blockquote><p>众所周知，<code>npm</code> 是 <code>Node.js</code> 的软件包管理器，其目标是自动化的依赖性和软件包管理。</p></blockquote><p>这意味着，可以在 <code>package.json</code> 文件中为项目指定所有依赖项（软件包），当需要为其安装依赖项时，只要运行 <code>npm install</code>，这样就好啦！</p><p>它还提供了版本控制，即可以指定项目的依赖版本，这样可以在大多数情况下，防止更新破坏项目，或者使用首选版本。</p><p>另一方面，<code>npx</code> 是执行 <code>Node</code> 软件包的工具，它从 <code>npm5.2</code> 版本开始，就与 <code>npm</code> 捆绑在一起。</p><h3 id="npx" tabindex="-1"><a class="header-anchor" href="#npx" aria-hidden="true">#</a> npx</h3><ol><li>默认情况下，首先检查路径中是否存在要执行的包（即在项目中）；</li><li>如果存在，它将执行；</li><li>若不存在，意味着尚未安装该软件包，npx 将安装其最新版本，然后执行它；</li></ol><blockquote><p>上文已说明，此行为是 <code>npx</code> 的默认行为之一，但它具有可用来阻止的标志。</p></blockquote><p>例如，如果运行 <code>npx</code> <code>some-package</code> --no-install，意味着告诉 <code>npx</code> ，它应该仅执行。<code>some-package</code>，如果之前未安装，则不安装</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>假设有一个名为<code>my-package</code>的软件包，想要执行它。</p><p>好吧，若没有 npx，要执行一个软件包，必须通过其本地路径运行来完成，如：<code>./node_modules/bin/my-package</code></p><p>或在 <code>package.json</code>文件的 <code>scripts section</code>中将其定义为单独的脚本，如下所示：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;something&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;my-package&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/bin/my-package&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用 <code>npm run my-package</code> 运行。</p><p>现在，运用 <code>npx</code>，只需运行 <code>npx my-package</code>，即可轻松实现此目的。</p>`,17),p=[c];function d(t,i){return n(),a("div",null,p)}const r=e(s,[["render",d],["__file","index.html.vue"]]);export{r as default};
